# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ShoppingCartItem(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, item_id: int=None, price: float=None, quantity: int=None, shopping_cart_id: int=None, status: str=None):
        """
        ShoppingCartItem - a model defined in Swagger

        :param item_id: The item_id of this ShoppingCartItem.
        :type item_id: int
        :param price: The price of this ShoppingCartItem.
        :type price: float
        :param quantity: The quantity of this ShoppingCartItem.
        :type quantity: int
        :param shopping_cart_id: The shopping_cart_id of this ShoppingCartItem.
        :type shopping_cart_id: int
        :param status: The status of this ShoppingCartItem.
        :type status: str
        """
        self.swagger_types = {
            'item_id': int,
            'price': float,
            'quantity': int,
            'shopping_cart_id': int,
            'status': str
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'price': 'price',
            'quantity': 'quantity',
            'shopping_cart_id': 'shoppingCartId',
            'status': 'status'
        }

        self._item_id = item_id
        self._price = price
        self._quantity = quantity
        self._shopping_cart_id = shopping_cart_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ShoppingCartItem':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShoppingCartItem of this ShoppingCartItem.
        :rtype: ShoppingCartItem
        """
        return deserialize_model(dikt, cls)

    @property
    def item_id(self) -> int:
        """
        Gets the item_id of this ShoppingCartItem.
        The id of the item

        :return: The item_id of this ShoppingCartItem.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: int):
        """
        Sets the item_id of this ShoppingCartItem.
        The id of the item

        :param item_id: The item_id of this ShoppingCartItem.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def price(self) -> float:
        """
        Gets the price of this ShoppingCartItem.
        The price of the item when added to the cart

        :return: The price of this ShoppingCartItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """
        Sets the price of this ShoppingCartItem.
        The price of the item when added to the cart

        :param price: The price of this ShoppingCartItem.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self) -> int:
        """
        Gets the quantity of this ShoppingCartItem.
        Quantity being ordered

        :return: The quantity of this ShoppingCartItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """
        Sets the quantity of this ShoppingCartItem.
        Quantity being ordered

        :param quantity: The quantity of this ShoppingCartItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def shopping_cart_id(self) -> int:
        """
        Gets the shopping_cart_id of this ShoppingCartItem.
        The id of the shopping cart

        :return: The shopping_cart_id of this ShoppingCartItem.
        :rtype: int
        """
        return self._shopping_cart_id

    @shopping_cart_id.setter
    def shopping_cart_id(self, shopping_cart_id: int):
        """
        Sets the shopping_cart_id of this ShoppingCartItem.
        The id of the shopping cart

        :param shopping_cart_id: The shopping_cart_id of this ShoppingCartItem.
        :type shopping_cart_id: int
        """

        self._shopping_cart_id = shopping_cart_id

    @property
    def status(self) -> str:
        """
        Gets the status of this ShoppingCartItem.

        :return: The status of this ShoppingCartItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this ShoppingCartItem.

        :param status: The status of this ShoppingCartItem.
        :type status: str
        """
        allowed_values = ["SHOPPING", "ORDERED", "IN_PROGRESS", "GATHERING_MATERIALS", "SHIPPING", "COMPLETE"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

