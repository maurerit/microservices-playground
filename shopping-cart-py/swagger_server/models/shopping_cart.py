# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.shopping_cart_item import ShoppingCartItem
from swagger_server.models.status import ShoppingCartStatus
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model
import sqlalchemy as sa
from . import db


class ShoppingCart(Model, db.Model):
    __tablename__ = "shopping_cart"
    __name__ = "ShoppingCart"

    _shopping_cart_id = sa.Column(sa.BIGINT, name="shopping_cart_id", autoincrement=True, primary_key=True, doc="primary key")
    _customer_id = sa.Column(sa.BIGINT, name="customer_id", nullable=False)
    _status = sa.Column(sa.INT, name="status", nullable=False)


    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self,
                 customer_id: int=None,
                 items: List[ShoppingCartItem]=None,
                 shopping_cart_id: int=None,
                 status: ShoppingCartStatus=ShoppingCartStatus.SHOPPING):
        """
        ShoppingCart - a model defined in Swagger

        :param customer_id: The customer_id of this ShoppingCart.
        :type customer_id: int
        :param items: The items of this ShoppingCart.
        :type items: List[ShoppingCartItem]
        :param shopping_cart_id: The shopping_cart_id of this ShoppingCart.
        :type shopping_cart_id: int
        :param status: The status of this ShoppingCart.
        :type status: ShoppingCartStatus
        """
        self.swagger_types = {
            'customer_id': int,
            'items': List[ShoppingCartItem],
            'shopping_cart_id': int,
            'status': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'items': 'items',
            'shopping_cart_id': 'shoppingCartId',
            'status': 'status'
        }

        self._customer_id = customer_id
        self._items = items
        self._shopping_cart_id = shopping_cart_id
        self._status = status.value

    @classmethod
    def from_dict(cls, dikt) -> 'ShoppingCart':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShoppingCart of this ShoppingCart.
        :rtype: ShoppingCart
        """
        return deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> int:
        """
        Gets the customer_id of this ShoppingCart.
        The id of the customer

        :return: The customer_id of this ShoppingCart.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """
        Sets the customer_id of this ShoppingCart.
        The id of the customer

        :param customer_id: The customer_id of this ShoppingCart.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def items(self) -> List[ShoppingCartItem]:
        """
        Gets the items of this ShoppingCart.
        All of the items in this shopping cart

        :return: The items of this ShoppingCart.
        :rtype: List[ShoppingCartItem]
        """
        return self._items

    @items.setter
    def items(self, items: List[ShoppingCartItem]):
        """
        Sets the items of this ShoppingCart.
        All of the items in this shopping cart

        :param items: The items of this ShoppingCart.
        :type items: List[ShoppingCartItem]
        """

        self._items = items

    @property
    def shopping_cart_id(self) -> int:
        """
        Gets the shopping_cart_id of this ShoppingCart.
        The id of the shopping cart

        :return: The shopping_cart_id of this ShoppingCart.
        :rtype: int
        """
        return self._shopping_cart_id

    @shopping_cart_id.setter
    def shopping_cart_id(self, shopping_cart_id: int):
        """
        Sets the shopping_cart_id of this ShoppingCart.
        The id of the shopping cart

        :param shopping_cart_id: The shopping_cart_id of this ShoppingCart.
        :type shopping_cart_id: int
        """

        self._shopping_cart_id = shopping_cart_id

    @property
    def status(self) -> str:
        """
        Gets the status of this ShoppingCart.
        The status of the shopping cart

        :return: The status of this ShoppingCart.
        :rtype: str
        """
        return ShoppingCartStatus(self._status).name

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this ShoppingCart.
        The status of the shopping cart

        :param status: The status of this ShoppingCart.
        :type status: str
        """

        self._status = ShoppingCartStatus[status].value

